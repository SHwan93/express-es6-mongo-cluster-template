#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app.js');
const http = require('http');
const https = require('https');
// const debug = require('debug')('server:server');
const cluster = require('cluster');
const numCPUs = require('os').cpus().length;
var server;

if (cluster.isMaster) {
  console.log(`마스터 프로세스 아이디: ${process.pid}`);

  //cpu 갯수만큼 워커를 생산
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  //워커가 종료되었을때
  cluster.on('exit', (worker, code, signal) => {
    console.log(`${worker.process.pid}번 워커가 종료되었습니다 곧 다시 부활.`);
    cluster.fork();
  });
} else {

  // Prepare for HTTP or HTTPS only on 'prod' or 'test'
  if (process.env.NODE_ENV !== 'dev') {
    const pkey = process.env.SSL_PKEY;
    const pcert = process.env.SSL_PCERT;
    const ca = process.env.SSL_PKEY;
    const httpsOptions = {
      key: pkey,
      cert: pcert,
      ca: ca
    };

    server = https.createServer(httpsOptions, app);
  } else {
    server = http.createServer(app);
  }

  /** * Get port from environment and store in Express. */
  const port = normalizePort(process.env.PORT || '5000');

  /** Listen on provided port, on all network interfaces. */
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  // debug("Listening on " + bind);
}
